{
  "examples": [
    {
      "id": "001-basic-generation",
      "title": "Simple generation",
      "description": "",
      "order": 1,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 2,
          "line_range": [
            2,
            2
          ]
        },
        {
          "code": "# Our first example demonstrates how to use the Gemini API\n# to generate content with a simple prompt.\n",
          "display_code": "",
          "annotation": "Our first example demonstrates how to use the Gemini API\nto generate content with a simple prompt.",
          "is_comment": true,
          "start_line": 3,
          "line_range": [
            3,
            4
          ],
          "target_line_range": [
            5,
            6
          ]
        },
        {
          "code": "from google import genai\n\n",
          "display_code": "from google import genai\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            6
          ]
        },
        {
          "code": "# Best practice: store your API key in an environment variable\n# and load it from there.\n",
          "display_code": "",
          "annotation": "Best practice: store your API key in an environment variable\nand load it from there.",
          "is_comment": true,
          "start_line": 7,
          "line_range": [
            7,
            8
          ],
          "target_line_range": [
            9,
            14
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 9,
          "line_range": [
            9,
            14
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python basic-generation.py",
          "output": "AI works by learning patterns from data, then using those patterns to make predictions or generate new content. It processes information through neural networks that mimic human brain connections, identifying features and relationships to perform tasks like recognition, prediction, and generation."
        }
      ],
      "image_data": [
        {
          "path": "examples/001-basic-generation/basic-generation.png",
          "filename": "basic-generation.png",
          "caption": "Generation"
        }
      ],
      "section_id": "001-basic-text",
      "section_title": "Basic Examples: Text"
    },
    {
      "id": "002-values",
      "title": "Values in Python",
      "description": "This example demonstrates the different value types in Python.",
      "order": 2,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Strings are sequences of Unicode characters.\n# They can be defined with single or double quotes.\n",
          "display_code": "",
          "annotation": "Strings are sequences of Unicode characters.\nThey can be defined with single or double quotes.",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            5
          ],
          "target_line_range": [
            6,
            8
          ]
        },
        {
          "code": "print(\"Hello, World\")\nprint(\"Hello with single quotes\")\n\n",
          "display_code": "print(\"Hello, World\")\nprint(\"Hello with single quotes\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 6,
          "line_range": [
            6,
            8
          ]
        },
        {
          "code": "# Numbers in Python can be integers or floating-point.\n",
          "display_code": "",
          "annotation": "Numbers in Python can be integers or floating-point.",
          "is_comment": true,
          "start_line": 9,
          "line_range": [
            9,
            9
          ],
          "target_line_range": [
            10,
            12
          ]
        },
        {
          "code": "print(42)  # Integer\nprint(3.14159)  # Float\n\n",
          "display_code": "print(42)  # Integer\nprint(3.14159)  # Float\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 10,
          "line_range": [
            10,
            12
          ]
        },
        {
          "code": "# Booleans are represented by the values True and False.\n",
          "display_code": "",
          "annotation": "Booleans are represented by the values True and False.",
          "is_comment": true,
          "start_line": 13,
          "line_range": [
            13,
            13
          ],
          "target_line_range": [
            14,
            16
          ]
        },
        {
          "code": "print(True)\nprint(False)\n\n",
          "display_code": "print(True)\nprint(False)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 14,
          "line_range": [
            14,
            16
          ]
        },
        {
          "code": "# None is Python's null value.\n",
          "display_code": "",
          "annotation": "None is Python's null value.",
          "is_comment": true,
          "start_line": 17,
          "line_range": [
            17,
            17
          ],
          "target_line_range": [
            18,
            19
          ]
        },
        {
          "code": "print(None)\n\n",
          "display_code": "print(None)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 18,
          "line_range": [
            18,
            19
          ]
        },
        {
          "code": "# Python has several built-in collections:\n# Lists are ordered, mutable collections\n",
          "display_code": "",
          "annotation": "Python has several built-in collections:\nLists are ordered, mutable collections",
          "is_comment": true,
          "start_line": 20,
          "line_range": [
            20,
            21
          ],
          "target_line_range": [
            22,
            24
          ]
        },
        {
          "code": "my_list = [1, 2, 3, \"four\", 5.0]\nprint(my_list)\n\n",
          "display_code": "my_list = [1, 2, 3, \"four\", 5.0]\nprint(my_list)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 22,
          "line_range": [
            22,
            24
          ]
        },
        {
          "code": "# Tuples are ordered, immutable collections\n",
          "display_code": "",
          "annotation": "Tuples are ordered, immutable collections",
          "is_comment": true,
          "start_line": 25,
          "line_range": [
            25,
            25
          ],
          "target_line_range": [
            26,
            28
          ]
        },
        {
          "code": "my_tuple = (1, 2, \"three\")\nprint(my_tuple)\n\n",
          "display_code": "my_tuple = (1, 2, \"three\")\nprint(my_tuple)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 26,
          "line_range": [
            26,
            28
          ]
        },
        {
          "code": "# Dictionaries are key-value mappings\n",
          "display_code": "",
          "annotation": "Dictionaries are key-value mappings",
          "is_comment": true,
          "start_line": 29,
          "line_range": [
            29,
            29
          ],
          "target_line_range": [
            30,
            31
          ]
        },
        {
          "code": "my_dict = {\"name\": \"Python\", \"version\": 3.9}\nprint(my_dict)\n",
          "display_code": "my_dict = {\"name\": \"Python\", \"version\": 3.9}\nprint(my_dict)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 30,
          "line_range": [
            30,
            31
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "Run the values.py example to see all the different Python value types",
          "command": "python values.py",
          "output": "Hello, World\nHello with single quotes\n42\n3.14159\nTrue\nFalse\nNone\n[1, 2, 3, 'four', 5.0]\n(1, 2, 'three')\n{'name': 'Python', 'version': 3.9}"
        },
        {
          "explanation": "You can also run Python in interactive mode to experiment with values",
          "command": "python -c \"print('Hello from Python!'); print(1 + 2)\"",
          "output": "Hello from Python!\n3"
        }
      ],
      "image_data": [],
      "section_id": "002-basic-images",
      "section_title": "Basic Examples: Images"
    }
  ],
  "sections": [
    {
      "id": "001-basic-text",
      "title": "Basic Examples: Text",
      "description": "",
      "order": 1,
      "examples": [
        "001-basic-generation"
      ]
    },
    {
      "id": "002-basic-images",
      "title": "Basic Examples: Images",
      "description": "",
      "order": 2,
      "examples": [
        "002-values"
      ]
    }
  ]
}