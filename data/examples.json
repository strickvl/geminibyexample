{
  "examples": [
    {
      "id": "001-basic-generation",
      "title": "Simple text generation",
      "description": "",
      "order": 1,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 2,
          "line_range": [
            2,
            2
          ]
        },
        {
          "code": "# Our first example demonstrates how to use the Gemini API\n# to generate content with a simple prompt.\n",
          "display_code": "",
          "annotation": "Our first example demonstrates how to use the Gemini API\nto generate content with a simple prompt.",
          "is_comment": true,
          "start_line": 3,
          "line_range": [
            3,
            4
          ],
          "target_line_range": [
            5,
            6
          ]
        },
        {
          "code": "from google import genai\n\n",
          "display_code": "from google import genai\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            6
          ]
        },
        {
          "code": "# Best practice: store your API key in an environment variable\n# and load it from there.\n",
          "display_code": "",
          "annotation": "Best practice: store your API key in an environment variable\nand load it from there.",
          "is_comment": true,
          "start_line": 7,
          "line_range": [
            7,
            8
          ],
          "target_line_range": [
            9,
            14
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 9,
          "line_range": [
            9,
            14
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python basic-generation.py",
          "output": "AI works by learning patterns from data, then using those patterns to make predictions or generate new content. It processes information through neural networks that mimic human brain connections, identifying features and relationships to perform tasks like recognition, prediction, and generation."
        }
      ],
      "image_data": [
        {
          "path": "examples/001-basic-generation/basic-generation.png",
          "filename": "basic-generation.png",
          "caption": "Generation"
        }
      ],
      "section_id": "001-basic-text",
      "section_title": "Basic Examples: Text"
    },
    {
      "id": "002-streaming-text",
      "title": "Streaming Text Generation using the HTTP API",
      "description": "This example demonstrates how to use the Gemini API to generate text content\nand stream the output using the HTTP API.",
      "order": 2,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 4,
          "line_range": [
            4,
            4
          ]
        },
        {
          "code": "# Import the necessary libraries\n",
          "display_code": "",
          "annotation": "Import the necessary libraries",
          "is_comment": true,
          "start_line": 5,
          "line_range": [
            5,
            5
          ],
          "target_line_range": [
            6,
            9
          ]
        },
        {
          "code": "import requests\nimport json\nimport os\n\n",
          "display_code": "import requests\nimport json\nimport os\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 6,
          "line_range": [
            6,
            9
          ]
        },
        {
          "code": "# Set the model and API key\n",
          "display_code": "",
          "annotation": "Set the model and API key",
          "is_comment": true,
          "start_line": 10,
          "line_range": [
            10,
            10
          ],
          "target_line_range": [
            11,
            14
          ]
        },
        {
          "code": "model = \"gemini-2.0-flash\"\napi_key = os.environ.get(\"GEMINI_API_KEY\", \"YOUR_API_KEY\")\nprompt = \"Explain how AI works\"\n\n",
          "display_code": "model = \"gemini-2.0-flash\"\napi_key = os.environ.get(\"GEMINI_API_KEY\", \"YOUR_API_KEY\")\nprompt = \"Explain how AI works\"\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 11,
          "line_range": [
            11,
            14
          ]
        },
        {
          "code": "# Set up the API request\n",
          "display_code": "",
          "annotation": "Set up the API request",
          "is_comment": true,
          "start_line": 15,
          "line_range": [
            15,
            15
          ],
          "target_line_range": [
            16,
            19
          ]
        },
        {
          "code": "url = f\"https://generativelanguage.googleapis.com/v1beta/models/{model}:streamGenerateContent\"\nparams = {\"alt\": \"sse\", \"key\": api_key}\npayload = {\"contents\": [{\"parts\": [{\"text\": prompt}]}]}\n\n",
          "display_code": "url = f\"https://generativelanguage.googleapis.com/v1beta/models/{model}:streamGenerateContent\"\nparams = {\"alt\": \"sse\", \"key\": api_key}\npayload = {\"contents\": [{\"parts\": [{\"text\": prompt}]}]}\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 16,
          "line_range": [
            16,
            19
          ]
        },
        {
          "code": "# Make the streaming request and process the response\n",
          "display_code": "",
          "annotation": "Make the streaming request and process the response",
          "is_comment": true,
          "start_line": 20,
          "line_range": [
            20,
            20
          ],
          "target_line_range": [
            21,
            30
          ]
        },
        {
          "code": "with requests.post(url, json=payload, params=params, stream=True) as r:\n    for line in r.iter_lines():\n        if line and line.startswith(b\"data: \") and not line.endswith(b\"[DONE]\"):\n            try:\n                data = json.loads(line[6:])\n                if \"candidates\" in data and data[\"candidates\"]:\n                    text = data[\"candidates\"][0][\"content\"][\"parts\"][0].get(\"text\", \"\")\n                    print(text, end=\"\")\n            except:\n                pass\n",
          "display_code": "with requests.post(url, json=payload, params=params, stream=True) as r:\n    for line in r.iter_lines():\n        if line and line.startswith(b\"data: \") and not line.endswith(b\"[DONE]\"):\n            try:\n                data = json.loads(line[6:])\n                if \"candidates\" in data and data[\"candidates\"]:\n                    text = data[\"candidates\"][0][\"content\"][\"parts\"][0].get(\"text\", \"\")\n                    print(text, end=\"\")\n            except:\n                pass\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 21,
          "line_range": [
            21,
            30
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python streaming-generation.py",
          "output": "AI, or Artificial Intelligence, is a broad field of computer science focused on creating machines capable of performing tasks that typically require human intelligence. It involves developing algorithms and models that enable computers to learn from data, reason, solve problems, understand natural language, perceive their environment, and make decisions."
        }
      ],
      "image_data": [],
      "section_id": "001-basic-text",
      "section_title": "Basic Examples: Text"
    },
    {
      "id": "003-system-prompt",
      "title": "System Instructions Example",
      "description": "This example demonstrates how to use system instructions to guide the model's behavior.",
      "order": 3,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import the Gemini API\n",
          "display_code": "",
          "annotation": "Import the Gemini API",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            7
          ]
        },
        {
          "code": "from google import genai\nfrom google.genai import types\n\n",
          "display_code": "from google import genai\nfrom google.genai import types\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            7
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 8,
          "line_range": [
            8,
            8
          ],
          "target_line_range": [
            9,
            10
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 9,
          "line_range": [
            9,
            10
          ]
        },
        {
          "code": "# Configure the model with system instructions\n# These instructions tell the model to act as a pirate\n",
          "display_code": "",
          "annotation": "Configure the model with system instructions\nThese instructions tell the model to act as a pirate",
          "is_comment": true,
          "start_line": 11,
          "line_range": [
            11,
            12
          ],
          "target_line_range": [
            13,
            19
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    config=types.GenerateContentConfig(\n        system_instruction=\"You are a pirate.  Answer all questions like a pirate.\"),\n    contents=\"Hello there\"\n)\n\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    config=types.GenerateContentConfig(\n        system_instruction=\"You are a pirate.  Answer all questions like a pirate.\"),\n    contents=\"Hello there\"\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 13,
          "line_range": [
            13,
            19
          ]
        },
        {
          "code": "# Print the model's response\n",
          "display_code": "",
          "annotation": "Print the model's response",
          "is_comment": true,
          "start_line": 20,
          "line_range": [
            20,
            20
          ],
          "target_line_range": [
            21,
            21
          ]
        },
        {
          "code": "print(response.text)",
          "display_code": "print(response.text)",
          "annotation": "",
          "is_comment": false,
          "start_line": 21,
          "line_range": [
            21,
            21
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python system_instructions.py",
          "output": "Ahoy there, matey! What be on yer mind?"
        }
      ],
      "image_data": [],
      "section_id": "001-basic-text",
      "section_title": "Basic Examples: Text"
    }
  ],
  "sections": [
    {
      "id": "001-basic-text",
      "title": "Basic Examples: Text",
      "description": "",
      "order": 1,
      "examples": [
        "001-basic-generation",
        "002-streaming-text",
        "003-system-prompt"
      ]
    },
    {
      "id": "002-basic-images",
      "title": "Basic Examples: Images",
      "description": "",
      "order": 2,
      "examples": []
    }
  ]
}