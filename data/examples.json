{
  "examples": [
    {
      "id": "001-basic-generation",
      "title": "Simple text generation",
      "description": "",
      "order": 1,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 2,
          "line_range": [
            2,
            2
          ]
        },
        {
          "code": "# Our first example demonstrates how to use the Gemini API\n# to generate content with a simple prompt.\n",
          "display_code": "",
          "annotation": "Our first example demonstrates how to use the Gemini API\nto generate content with a simple prompt.",
          "is_comment": true,
          "start_line": 3,
          "line_range": [
            3,
            4
          ],
          "target_line_range": [
            5,
            6
          ]
        },
        {
          "code": "from google import genai\n\n",
          "display_code": "from google import genai\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            6
          ]
        },
        {
          "code": "# Best practice: store your API key in an environment variable\n# and load it from there.\n",
          "display_code": "",
          "annotation": "Best practice: store your API key in an environment variable\nand load it from there.",
          "is_comment": true,
          "start_line": 7,
          "line_range": [
            7,
            8
          ],
          "target_line_range": [
            9,
            14
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\", contents=\"Explain how AI works in a few words\"\n)\nprint(response.text)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 9,
          "line_range": [
            9,
            14
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python basic-generation.py",
          "output": "AI works by learning patterns from data, then using those patterns to make predictions or generate new content. It processes information through neural networks that mimic human brain connections, identifying features and relationships to perform tasks like recognition, prediction, and generation."
        }
      ],
      "image_data": [
        {
          "path": "examples/001-basic-generation/basic-generation.png",
          "filename": "basic-generation.png",
          "caption": "Generation"
        }
      ],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/text-generation"
      ],
      "section_id": "001-basic-text",
      "section_title": "Text Basics"
    },
    {
      "id": "002-streaming-text",
      "title": "Streaming text",
      "description": "This example demonstrates how to use the Gemini API to generate text content and stream the output.",
      "order": 2,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import the Gemini API\n",
          "display_code": "",
          "annotation": "Import the Gemini API",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            6
          ]
        },
        {
          "code": "from google import genai\n\n",
          "display_code": "from google import genai\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            6
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 7,
          "line_range": [
            7,
            7
          ],
          "target_line_range": [
            8,
            9
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 8,
          "line_range": [
            8,
            9
          ]
        },
        {
          "code": "# Call the API to generate content in streaming mode\n",
          "display_code": "",
          "annotation": "Call the API to generate content in streaming mode",
          "is_comment": true,
          "start_line": 10,
          "line_range": [
            10,
            10
          ],
          "target_line_range": [
            11,
            15
          ]
        },
        {
          "code": "response = client.models.generate_content_stream(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Explain how AI works\"]\n)\n\n",
          "display_code": "response = client.models.generate_content_stream(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Explain how AI works\"]\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 11,
          "line_range": [
            11,
            15
          ]
        },
        {
          "code": "# Iterate over the stream of responses and print each chunk of text\n",
          "display_code": "",
          "annotation": "Iterate over the stream of responses and print each chunk of text",
          "is_comment": true,
          "start_line": 16,
          "line_range": [
            16,
            16
          ],
          "target_line_range": [
            17,
            18
          ]
        },
        {
          "code": "for chunk in response:\n    print(chunk.text, end=\"\")\n",
          "display_code": "for chunk in response:\n    print(chunk.text, end=\"\")\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 17,
          "line_range": [
            17,
            18
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python streaming-generation.py",
          "output": "AI, or Artificial Intelligence, is a broad field of computer science focused on creating machines capable of performing tasks that typically require human intelligence. It involves developing algorithms and models that enable computers to learn from data, reason, solve problems, understand natural language, perceive their environment, and make decisions."
        }
      ],
      "image_data": [],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/text-generation"
      ],
      "section_id": "001-basic-text",
      "section_title": "Text Basics"
    },
    {
      "id": "003-system-prompt",
      "title": "System prompt",
      "description": "This example demonstrates how to use system instructions to guide the model's behavior.",
      "order": 3,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import the Gemini API\n",
          "display_code": "",
          "annotation": "Import the Gemini API",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            7
          ]
        },
        {
          "code": "from google import genai\nfrom google.genai import types\n\n",
          "display_code": "from google import genai\nfrom google.genai import types\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            7
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 8,
          "line_range": [
            8,
            8
          ],
          "target_line_range": [
            9,
            10
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 9,
          "line_range": [
            9,
            10
          ]
        },
        {
          "code": "# Configure the model with system instructions\n# These instructions tell the model to act as a pirate\n",
          "display_code": "",
          "annotation": "Configure the model with system instructions\nThese instructions tell the model to act as a pirate",
          "is_comment": true,
          "start_line": 11,
          "line_range": [
            11,
            12
          ],
          "target_line_range": [
            13,
            19
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    config=types.GenerateContentConfig(\n        system_instruction=\"You are a pirate.  Answer all questions like a pirate.\"),\n    contents=\"Hello there\"\n)\n\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    config=types.GenerateContentConfig(\n        system_instruction=\"You are a pirate.  Answer all questions like a pirate.\"),\n    contents=\"Hello there\"\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 13,
          "line_range": [
            13,
            19
          ]
        },
        {
          "code": "# Print the model's response\n",
          "display_code": "",
          "annotation": "Print the model's response",
          "is_comment": true,
          "start_line": 20,
          "line_range": [
            20,
            20
          ],
          "target_line_range": [
            21,
            21
          ]
        },
        {
          "code": "print(response.text)\n",
          "display_code": "print(response.text)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 21,
          "line_range": [
            21,
            21
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python system_instructions.py",
          "output": "Ahoy there, matey! What be on yer mind?"
        }
      ],
      "image_data": [],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/text-generation#system-instructions"
      ],
      "section_id": "001-basic-text",
      "section_title": "Text Basics"
    },
    {
      "id": "004-image-q-a",
      "title": "Understanding images",
      "description": "This example demonstrates how to use the Gemini API to analyze or understand images of cats, including using image URLs and base64 encoding.",
      "order": 4,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import necessary libraries\n",
          "display_code": "",
          "annotation": "Import necessary libraries",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            9
          ]
        },
        {
          "code": "from google import genai\nfrom google.genai import types\nimport requests\nimport base64\n\n",
          "display_code": "from google import genai\nfrom google.genai import types\nimport requests\nimport base64\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            9
          ]
        },
        {
          "code": "# Replace with your Gemini API key\n",
          "display_code": "",
          "annotation": "Replace with your Gemini API key",
          "is_comment": true,
          "start_line": 10,
          "line_range": [
            10,
            10
          ],
          "target_line_range": [
            11,
            12
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 11,
          "line_range": [
            11,
            12
          ]
        },
        {
          "code": "# We'll start by using an image URL.\n# Load an image of a cat from a URL\n",
          "display_code": "",
          "annotation": "We'll start by using an image URL.\nLoad an image of a cat from a URL",
          "is_comment": true,
          "start_line": 13,
          "line_range": [
            13,
            14
          ],
          "target_line_range": [
            15,
            18
          ]
        },
        {
          "code": "image_url = \"https://cataas.com/cat\"\nimage_response = requests.get(image_url)\nimage_content = image_response.content\n\n",
          "display_code": "image_url = \"https://cataas.com/cat\"\nimage_response = requests.get(image_url)\nimage_content = image_response.content\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 15,
          "line_range": [
            15,
            18
          ]
        },
        {
          "code": "# Ask Gemini about the cat in the image\n",
          "display_code": "",
          "annotation": "Ask Gemini about the cat in the image",
          "is_comment": true,
          "start_line": 19,
          "line_range": [
            19,
            19
          ],
          "target_line_range": [
            20,
            26
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"What breed of cat is this?\", types.Part.from_bytes(data=image_content, mime_type=\"image/jpeg\")]\n)\n\nprint(\"Response from URL Image:\\n\", response.text)\n\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"What breed of cat is this?\", types.Part.from_bytes(data=image_content, mime_type=\"image/jpeg\")]\n)\n\nprint(\"Response from URL Image:\\n\", response.text)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 20,
          "line_range": [
            20,
            26
          ]
        },
        {
          "code": "# Now we'll use a local image file.\n# Load a local image of a cat and encode it as Base64\n",
          "display_code": "",
          "annotation": "Now we'll use a local image file.\nLoad a local image of a cat and encode it as Base64",
          "is_comment": true,
          "start_line": 27,
          "line_range": [
            27,
            28
          ],
          "target_line_range": [
            29,
            31
          ]
        },
        {
          "code": "with open(\"cat.jpg\", \"rb\") as image_file:\n    encoded_string = base64.b64encode(image_file.read())\n\n",
          "display_code": "with open(\"cat.jpg\", \"rb\") as image_file:\n    encoded_string = base64.b64encode(image_file.read())\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 29,
          "line_range": [
            29,
            31
          ]
        },
        {
          "code": "# Ensure the encoded string is a string\n",
          "display_code": "",
          "annotation": "Ensure the encoded string is a string",
          "is_comment": true,
          "start_line": 32,
          "line_range": [
            32,
            32
          ],
          "target_line_range": [
            33,
            34
          ]
        },
        {
          "code": "encoded_string = encoded_string.decode('utf-8')\n\n",
          "display_code": "encoded_string = encoded_string.decode('utf-8')\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 33,
          "line_range": [
            33,
            34
          ]
        },
        {
          "code": "# Ask Gemini a question about the cat, providing the image as a Base64 string\n",
          "display_code": "",
          "annotation": "Ask Gemini a question about the cat, providing the image as a Base64 string",
          "is_comment": true,
          "start_line": 35,
          "line_range": [
            35,
            35
          ],
          "target_line_range": [
            36,
            41
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Is this cat fluffy?\", types.Part.from_bytes(data=base64.b64decode(encoded_string), mime_type=\"image/jpeg\")]\n)\n\nprint(\"\\nResponse from Base64 Image:\\n\", response.text)\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[\"Is this cat fluffy?\", types.Part.from_bytes(data=base64.b64decode(encoded_string), mime_type=\"image/jpeg\")]\n)\n\nprint(\"\\nResponse from Base64 Image:\\n\", response.text)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 36,
          "line_range": [
            36,
            41
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library and requests",
          "command": "pip install google-generative-ai requests",
          "output": ""
        },
        {
          "explanation": "Download an example cat image (replace with your own if needed)",
          "command": "wget https://cataas.com/cat -O cat.jpg",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python gemini-cat.py",
          "output": "Response from URL Image:\n This looks like a British Shorthair cat."
        }
      ],
      "image_data": [],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/vision?lang=python"
      ],
      "section_id": "002-basic-images",
      "section_title": "Images Basics"
    },
    {
      "id": "005-image-generation",
      "title": "Image generation (Gemini and Imagen)",
      "description": "This example demonstrates generating images using both Gemini 2.0 Flash and Imagen 3 models, focusing on cat-related prompts.",
      "order": 5,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import necessary libraries. Make sure Pillow is installed!\n",
          "display_code": "",
          "annotation": "Import necessary libraries. Make sure Pillow is installed!",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            9
          ]
        },
        {
          "code": "from google import genai\nfrom google.genai import types\nfrom PIL import Image\nfrom io import BytesIO\n\n",
          "display_code": "from google import genai\nfrom google.genai import types\nfrom PIL import Image\nfrom io import BytesIO\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            9
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 10,
          "line_range": [
            10,
            10
          ],
          "target_line_range": [
            11,
            12
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 11,
          "line_range": [
            11,
            12
          ]
        },
        {
          "code": "# We start by using Gemini 2.0 Flash for image generation.\n# Demonstrates generating an image and associated text using Gemini 2.0 Flash.\n",
          "display_code": "",
          "annotation": "We start by using Gemini 2.0 Flash for image generation.\nDemonstrates generating an image and associated text using Gemini 2.0 Flash.",
          "is_comment": true,
          "start_line": 13,
          "line_range": [
            13,
            14
          ],
          "target_line_range": [
            15,
            25
          ]
        },
        {
          "code": "contents = (\n    \"Hi, can you create a 3D rendered image of a cat wearing a wizard hat, \"\n    \"casting a spell in a magical forest?\"\n)\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash-exp-image-generation\",\n    contents=contents,\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n\n",
          "display_code": "contents = (\n    \"Hi, can you create a 3D rendered image of a cat wearing a wizard hat, \"\n    \"casting a spell in a magical forest?\"\n)\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash-exp-image-generation\",\n    contents=contents,\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 15,
          "line_range": [
            15,
            25
          ]
        },
        {
          "code": "# Save the image to a file and display it\n",
          "display_code": "",
          "annotation": "Save the image to a file and display it",
          "is_comment": true,
          "start_line": 26,
          "line_range": [
            26,
            26
          ],
          "target_line_range": [
            27,
            34
          ]
        },
        {
          "code": "for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"gemini-cat-wizard.png\")\n        image.show()\n\n",
          "display_code": "for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"gemini-cat-wizard.png\")\n        image.show()\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 27,
          "line_range": [
            27,
            34
          ]
        },
        {
          "code": "# Now we use Imagen 3 for image generation.\n# Demonstrates generating multiple high-quality images of cats using Imagen 3.\n# Imagen 3 is only available on the Paid Tier and always includes a SynthID watermark.\n",
          "display_code": "",
          "annotation": "Now we use Imagen 3 for image generation.\nDemonstrates generating multiple high-quality images of cats using Imagen 3.\nImagen 3 is only available on the Paid Tier and always includes a SynthID watermark.",
          "is_comment": true,
          "start_line": 35,
          "line_range": [
            35,
            37
          ],
          "target_line_range": [
            38,
            43
          ]
        },
        {
          "code": "response = client.models.generate_images(\n    model=\"imagen-3.0-generate-002\",\n    prompt=\"A photorealistic image of a cat astronaut floating in space\",\n    config=types.GenerateImagesConfig(number_of_images=2),\n)\n\n",
          "display_code": "response = client.models.generate_images(\n    model=\"imagen-3.0-generate-002\",\n    prompt=\"A photorealistic image of a cat astronaut floating in space\",\n    config=types.GenerateImagesConfig(number_of_images=2),\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 38,
          "line_range": [
            38,
            43
          ]
        },
        {
          "code": "# Save the images to files and display them\n",
          "display_code": "",
          "annotation": "Save the images to files and display them",
          "is_comment": true,
          "start_line": 44,
          "line_range": [
            44,
            44
          ],
          "target_line_range": [
            45,
            48
          ]
        },
        {
          "code": "for i, generated_image in enumerate(response.generated_images):\n    image = Image.open(BytesIO(generated_image.image.image_bytes))\n    image.save(f\"imagen-cat-astronaut-{i+1}.png\")\n    image.show()\n",
          "display_code": "for i, generated_image in enumerate(response.generated_images):\n    image = Image.open(BytesIO(generated_image.image.image_bytes))\n    image.save(f\"imagen-cat-astronaut-{i+1}.png\")\n    image.show()\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 45,
          "line_range": [
            45,
            48
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai Pillow",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python image-generation.py",
          "output": "# Expected output (will vary based on the model):\n# (Text describing the cat wizard image from Gemini 2.0 Flash)\n# (Two image windows will open, displaying the generated cat astronaut images from Imagen 3)\n# Image saved as gemini-cat-wizard.png\n# (Two image windows will open, displaying the generated cat astronaut images from Imagen 3)"
        }
      ],
      "image_data": [
        {
          "path": "examples/005-image-generation/cat-wizard.png",
          "filename": "cat-wizard.png",
          "caption": "Wizard"
        }
      ],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/image-generation"
      ],
      "section_id": "002-basic-images",
      "section_title": "Images Basics"
    },
    {
      "id": "006-editing-images",
      "title": "Edit an image",
      "description": "This example demonstrates how to edit an existing image of a cat to add a hat using the Gemini API.",
      "order": 6,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import necessary libraries. Make sure Pillow is installed!\n",
          "display_code": "",
          "annotation": "Import necessary libraries. Make sure Pillow is installed!",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            11
          ]
        },
        {
          "code": "from google import genai\nfrom google.genai import types\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\nimport os\n\n",
          "display_code": "from google import genai\nfrom google.genai import types\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\nimport os\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            11
          ]
        },
        {
          "code": "# Set your Gemini API key\n",
          "display_code": "",
          "annotation": "Set your Gemini API key",
          "is_comment": true,
          "start_line": 12,
          "line_range": [
            12,
            12
          ],
          "target_line_range": [
            13,
            14
          ]
        },
        {
          "code": "client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\n",
          "display_code": "client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 13,
          "line_range": [
            13,
            14
          ]
        },
        {
          "code": "# Download the cat image from cataas.com\n",
          "display_code": "",
          "annotation": "Download the cat image from cataas.com",
          "is_comment": true,
          "start_line": 15,
          "line_range": [
            15,
            15
          ],
          "target_line_range": [
            16,
            19
          ]
        },
        {
          "code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "display_code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 16,
          "line_range": [
            16,
            19
          ]
        },
        {
          "code": "# Prepare a prompt.\n",
          "display_code": "",
          "annotation": "Prepare a prompt.",
          "is_comment": true,
          "start_line": 20,
          "line_range": [
            20,
            20
          ],
          "target_line_range": [
            21,
            22
          ]
        },
        {
          "code": "text_prompt = \"Please add a stylish top hat to this cat.\"\n\n",
          "display_code": "text_prompt = \"Please add a stylish top hat to this cat.\"\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 21,
          "line_range": [
            21,
            22
          ]
        },
        {
          "code": "# Generate content with the Gemini API\n",
          "display_code": "",
          "annotation": "Generate content with the Gemini API",
          "is_comment": true,
          "start_line": 23,
          "line_range": [
            23,
            23
          ],
          "target_line_range": [
            24,
            30
          ]
        },
        {
          "code": "model = \"gemini-2.0-flash-exp-image-generation\"\nresponse = client.models.generate_content(\n    model=model,\n    contents=[text_prompt, cat_image],\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n\n",
          "display_code": "model = \"gemini-2.0-flash-exp-image-generation\"\nresponse = client.models.generate_content(\n    model=model,\n    contents=[text_prompt, cat_image],\n    config=types.GenerateContentConfig(response_modalities=[\"Text\", \"Image\"]),\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 24,
          "line_range": [
            24,
            30
          ]
        },
        {
          "code": "# Process the response. Retry if you get a 500 error.\n",
          "display_code": "",
          "annotation": "Process the response. Retry if you get a 500 error.",
          "is_comment": true,
          "start_line": 31,
          "line_range": [
            31,
            31
          ],
          "target_line_range": [
            32,
            36
          ]
        },
        {
          "code": "for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        print(f\"Received {part.inline_data.mime_type} data\")\n",
          "display_code": "for part in response.candidates[0].content.parts:\n    if part.text is not None:\n        print(part.text)\n    elif part.inline_data is not None:\n        print(f\"Received {part.inline_data.mime_type} data\")\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 32,
          "line_range": [
            32,
            36
          ]
        },
        {
          "code": "        # The data is provided as raw bytes, not base64-encoded\n",
          "display_code": "",
          "annotation": "The data is provided as raw bytes, not base64-encoded",
          "is_comment": true,
          "start_line": 37,
          "line_range": [
            37,
            37
          ],
          "target_line_range": [
            38,
            40
          ]
        },
        {
          "code": "        image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"cat_with_hat.png\")\n        print(\"\\nImage saved as cat_with_hat.png\")\n",
          "display_code": "        image = Image.open(BytesIO(part.inline_data.data))\n        image.save(\"cat_with_hat.png\")\n        print(\"\\nImage saved as cat_with_hat.png\")\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 38,
          "line_range": [
            38,
            40
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai Pillow requests",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python edit_cat.py",
          "output": ""
        }
      ],
      "image_data": [
        {
          "path": "examples/006-editing-images/cat_with_hat.png",
          "filename": "cat_with_hat.png",
          "caption": "cat_with_hat"
        }
      ],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/image-generation#gemini-image-editing"
      ],
      "section_id": "002-basic-images",
      "section_title": "Images Basics"
    },
    {
      "id": "007-bounding-boxes",
      "title": "Bounding boxes",
      "description": "This example demonstrates how to use the Gemini API to detect an object (a cat) in an image and retrieve its bounding box coordinates.",
      "order": 7,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import necessary libraries. Make sure Pillow is installed!\n",
          "display_code": "",
          "annotation": "Import necessary libraries. Make sure Pillow is installed!",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            9
          ]
        },
        {
          "code": "from google import genai\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\n",
          "display_code": "from google import genai\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            9
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 10,
          "line_range": [
            10,
            10
          ],
          "target_line_range": [
            11,
            12
          ]
        },
        {
          "code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "display_code": "client = genai.Client(api_key=\"YOUR_API_KEY\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 11,
          "line_range": [
            11,
            12
          ]
        },
        {
          "code": "# Specify the prompt, asking for a bounding box around the cat\n",
          "display_code": "",
          "annotation": "Specify the prompt, asking for a bounding box around the cat",
          "is_comment": true,
          "start_line": 13,
          "line_range": [
            13,
            13
          ],
          "target_line_range": [
            14,
            18
          ]
        },
        {
          "code": "prompt = (\n    \"Return a bounding box for the cat in this image \"\n    \"in [ymin, xmin, ymax, xmax] format.\"\n)\n\n",
          "display_code": "prompt = (\n    \"Return a bounding box for the cat in this image \"\n    \"in [ymin, xmin, ymax, xmax] format.\"\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 14,
          "line_range": [
            14,
            18
          ]
        },
        {
          "code": "# Download the cat image from cataas.com\n",
          "display_code": "",
          "annotation": "Download the cat image from cataas.com",
          "is_comment": true,
          "start_line": 19,
          "line_range": [
            19,
            19
          ],
          "target_line_range": [
            20,
            23
          ]
        },
        {
          "code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "display_code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 20,
          "line_range": [
            20,
            23
          ]
        },
        {
          "code": "# Call the Gemini API to generate content with the image and prompt\n",
          "display_code": "",
          "annotation": "Call the Gemini API to generate content with the image and prompt",
          "is_comment": true,
          "start_line": 24,
          "line_range": [
            24,
            24
          ],
          "target_line_range": [
            25,
            28
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-1.5-pro\", contents=[cat_image, prompt]\n)\n\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-1.5-pro\", contents=[cat_image, prompt]\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 25,
          "line_range": [
            25,
            28
          ]
        },
        {
          "code": "# Print the response text, which will contain the bounding box coordinates\n",
          "display_code": "",
          "annotation": "Print the response text, which will contain the bounding box coordinates",
          "is_comment": true,
          "start_line": 29,
          "line_range": [
            29,
            29
          ],
          "target_line_range": [
            30,
            31
          ]
        },
        {
          "code": "print(response.text)\n\n",
          "display_code": "print(response.text)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 30,
          "line_range": [
            30,
            31
          ]
        },
        {
          "code": "#\n# Normalize Coordinates\n# The model returns bounding box coordinates in the format [y_min, x_min, y_max, x_max].\n# To convert these normalized coordinates to the pixel coordinates of your original image, follow these steps:\n# 1. Divide each output coordinate by 1000.\n# 2. Multiply the x-coordinates by the original image width.\n# 3. Multiply the y-coordinates by the original image height.\n#\n# Example Calculation (assuming the model returns [200, 300, 700, 800] and the image is 1000x800):\n",
          "display_code": "",
          "annotation": "Normalize Coordinates\nThe model returns bounding box coordinates in the format [y_min, x_min, y_max, x_max].\nTo convert these normalized coordinates to the pixel coordinates of your original image, follow these steps:\n1. Divide each output coordinate by 1000.\n2. Multiply the x-coordinates by the original image width.\n3. Multiply the y-coordinates by the original image height.\n\nExample Calculation (assuming the model returns [200, 300, 700, 800] and the image is 1000x800):",
          "is_comment": true,
          "start_line": 32,
          "line_range": [
            32,
            40
          ],
          "target_line_range": [
            41,
            44
          ]
        },
        {
          "code": "y_min = (200 / 1000) * 800  # 160\nx_min = (300 / 1000) * 1000  # 300\ny_max = (700 / 1000) * 800  # 560\nx_max = (800 / 1000) * 1000  # 800\n",
          "display_code": "y_min = (200 / 1000) * 800  # 160\nx_min = (300 / 1000) * 1000  # 300\ny_max = (700 / 1000) * 800  # 560\nx_max = (800 / 1000) * 1000  # 800\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 41,
          "line_range": [
            41,
            44
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library, requests, and Pillow",
          "command": "pip install google-generative-ai Pillow requests",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python object-detection.py",
          "output": "[0.1, 0.2, 0.7, 0.8]"
        }
      ],
      "image_data": [],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/vision?lang=python#bbox"
      ],
      "section_id": "002-basic-images",
      "section_title": "Images Basics"
    },
    {
      "id": "008-image-segmentation",
      "title": "Image segmentation",
      "description": "This example demonstrates how to use the Gemini API to perform image segmentation on a picture of a cat.",
      "order": 8,
      "code_segments": [
        {
          "code": "\n",
          "display_code": "\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 3,
          "line_range": [
            3,
            3
          ]
        },
        {
          "code": "# Import the Gemini API and necessary libraries. Make sure Pillow is installed!\n",
          "display_code": "",
          "annotation": "Import the Gemini API and necessary libraries. Make sure Pillow is installed!",
          "is_comment": true,
          "start_line": 4,
          "line_range": [
            4,
            4
          ],
          "target_line_range": [
            5,
            12
          ]
        },
        {
          "code": "from google import genai\nimport os\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimport json\nimport base64\n\n",
          "display_code": "from google import genai\nimport os\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimport json\nimport base64\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 5,
          "line_range": [
            5,
            12
          ]
        },
        {
          "code": "# Initialize the Gemini client with your API key\n",
          "display_code": "",
          "annotation": "Initialize the Gemini client with your API key",
          "is_comment": true,
          "start_line": 13,
          "line_range": [
            13,
            13
          ],
          "target_line_range": [
            14,
            15
          ]
        },
        {
          "code": "client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\n",
          "display_code": "client = genai.Client(api_key=os.getenv(\"GEMINI_API_KEY\"))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 14,
          "line_range": [
            14,
            15
          ]
        },
        {
          "code": "# Define the prompt for image segmentation, focusing on cats\n",
          "display_code": "",
          "annotation": "Define the prompt for image segmentation, focusing on cats",
          "is_comment": true,
          "start_line": 16,
          "line_range": [
            16,
            16
          ],
          "target_line_range": [
            17,
            23
          ]
        },
        {
          "code": "prompt = \"\"\"\nGive the segmentation masks for the cat in the image.\nOutput a JSON list of segmentation masks where each entry contains the 2D\nbounding box in the key \\\"box_2d\\\", the segmentation mask in key \\\"mask\\\", and\nthe text label in the key \\\"label\\\". Use descriptive labels.\n\"\"\"\n\n",
          "display_code": "prompt = \"\"\"\nGive the segmentation masks for the cat in the image.\nOutput a JSON list of segmentation masks where each entry contains the 2D\nbounding box in the key \\\"box_2d\\\", the segmentation mask in key \\\"mask\\\", and\nthe text label in the key \\\"label\\\". Use descriptive labels.\n\"\"\"\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 17,
          "line_range": [
            17,
            23
          ]
        },
        {
          "code": "# Download the cat image from cataas.com\n",
          "display_code": "",
          "annotation": "Download the cat image from cataas.com",
          "is_comment": true,
          "start_line": 24,
          "line_range": [
            24,
            24
          ],
          "target_line_range": [
            25,
            28
          ]
        },
        {
          "code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "display_code": "image_url = \"https://cataas.com/cat\"\nresponse = requests.get(image_url)\ncat_image = Image.open(BytesIO(response.content))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 25,
          "line_range": [
            25,
            28
          ]
        },
        {
          "code": "# Save the original image\n",
          "display_code": "",
          "annotation": "Save the original image",
          "is_comment": true,
          "start_line": 29,
          "line_range": [
            29,
            29
          ],
          "target_line_range": [
            30,
            33
          ]
        },
        {
          "code": "original_filename = f\"cat_original.png\"\ncat_image.save(original_filename)\nprint(f\"Original image saved as: {original_filename}\")\n\n",
          "display_code": "original_filename = f\"cat_original.png\"\ncat_image.save(original_filename)\nprint(f\"Original image saved as: {original_filename}\")\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 30,
          "line_range": [
            30,
            33
          ]
        },
        {
          "code": "# Call the Gemini API to generate content with the image and prompt\n",
          "display_code": "",
          "annotation": "Call the Gemini API to generate content with the image and prompt",
          "is_comment": true,
          "start_line": 34,
          "line_range": [
            34,
            34
          ],
          "target_line_range": [
            35,
            38
          ]
        },
        {
          "code": "response = client.models.generate_content(\n    model=\"gemini-2.5-pro-exp-03-25\", contents=[cat_image, prompt]\n)\n\n",
          "display_code": "response = client.models.generate_content(\n    model=\"gemini-2.5-pro-exp-03-25\", contents=[cat_image, prompt]\n)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 35,
          "line_range": [
            35,
            38
          ]
        },
        {
          "code": "# Print the response containing segmentation information.\n",
          "display_code": "",
          "annotation": "Print the response containing segmentation information.",
          "is_comment": true,
          "start_line": 39,
          "line_range": [
            39,
            39
          ],
          "target_line_range": [
            40,
            41
          ]
        },
        {
          "code": "print(response.text)\n\n",
          "display_code": "print(response.text)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 40,
          "line_range": [
            40,
            41
          ]
        },
        {
          "code": "# Display and save the overlaid mask.\n# Extract the JSON part from the response (it might be wrapped in markdown)\n",
          "display_code": "",
          "annotation": "Display and save the overlaid mask.\nExtract the JSON part from the response (it might be wrapped in markdown)",
          "is_comment": true,
          "start_line": 42,
          "line_range": [
            42,
            43
          ],
          "target_line_range": [
            44,
            53
          ]
        },
        {
          "code": "response_text = response.text\nif \"```json\" in response_text:\n    json_str = response_text.split(\"```json\")[1].split(\"```\")[0].strip()\nelif \"[\" in response_text and \"]\" in response_text:\n    start = response_text.find(\"[\")\n    end = response_text.rfind(\"]\") + 1\n    json_str = response_text[start:end]\nelse:\n    json_str = response_text\n\n",
          "display_code": "response_text = response.text\nif \"```json\" in response_text:\n    json_str = response_text.split(\"```json\")[1].split(\"```\")[0].strip()\nelif \"[\" in response_text and \"]\" in response_text:\n    start = response_text.find(\"[\")\n    end = response_text.rfind(\"]\") + 1\n    json_str = response_text[start:end]\nelse:\n    json_str = response_text\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 44,
          "line_range": [
            44,
            53
          ]
        },
        {
          "code": "# Parse JSON data\n",
          "display_code": "",
          "annotation": "Parse JSON data",
          "is_comment": true,
          "start_line": 54,
          "line_range": [
            54,
            54
          ],
          "target_line_range": [
            55,
            56
          ]
        },
        {
          "code": "mask_data = json.loads(json_str)\n\n",
          "display_code": "mask_data = json.loads(json_str)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 55,
          "line_range": [
            55,
            56
          ]
        },
        {
          "code": "# Get the first mask. This assumes a mask was returned.\n",
          "display_code": "",
          "annotation": "Get the first mask. This assumes a mask was returned.",
          "is_comment": true,
          "start_line": 57,
          "line_range": [
            57,
            57
          ],
          "target_line_range": [
            58,
            59
          ]
        },
        {
          "code": "first_mask = mask_data[0]\n\n",
          "display_code": "first_mask = mask_data[0]\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 58,
          "line_range": [
            58,
            59
          ]
        },
        {
          "code": "# Extract base64 encoded mask\n",
          "display_code": "",
          "annotation": "Extract base64 encoded mask",
          "is_comment": true,
          "start_line": 60,
          "line_range": [
            60,
            60
          ],
          "target_line_range": [
            61,
            64
          ]
        },
        {
          "code": "mask_base64 = first_mask.get(\"mask\", \"\")\nif \"base64,\" in mask_base64:\n    mask_base64 = mask_base64.split(\"base64,\")[1]\n\n",
          "display_code": "mask_base64 = first_mask.get(\"mask\", \"\")\nif \"base64,\" in mask_base64:\n    mask_base64 = mask_base64.split(\"base64,\")[1]\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 61,
          "line_range": [
            61,
            64
          ]
        },
        {
          "code": "# Decode and load the mask image\n",
          "display_code": "",
          "annotation": "Decode and load the mask image",
          "is_comment": true,
          "start_line": 65,
          "line_range": [
            65,
            65
          ],
          "target_line_range": [
            66,
            68
          ]
        },
        {
          "code": "mask_bytes = base64.b64decode(mask_base64)\nmask_image = Image.open(BytesIO(mask_bytes))\n\n",
          "display_code": "mask_bytes = base64.b64decode(mask_base64)\nmask_image = Image.open(BytesIO(mask_bytes))\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 66,
          "line_range": [
            66,
            68
          ]
        },
        {
          "code": "# Convert images to RGBA\n",
          "display_code": "",
          "annotation": "Convert images to RGBA",
          "is_comment": true,
          "start_line": 69,
          "line_range": [
            69,
            69
          ],
          "target_line_range": [
            70,
            72
          ]
        },
        {
          "code": "cat_image = cat_image.convert(\"RGBA\")\nmask_image = mask_image.convert(\"L\")  # Convert mask to grayscale\n\n",
          "display_code": "cat_image = cat_image.convert(\"RGBA\")\nmask_image = mask_image.convert(\"L\")  # Convert mask to grayscale\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 70,
          "line_range": [
            70,
            72
          ]
        },
        {
          "code": "# Create a bright colored overlay (bright pink)\n",
          "display_code": "",
          "annotation": "Create a bright colored overlay (bright pink)",
          "is_comment": true,
          "start_line": 73,
          "line_range": [
            73,
            73
          ],
          "target_line_range": [
            74,
            77
          ]
        },
        {
          "code": "overlay = Image.new(\n    \"RGBA\", mask_image.size, (255, 0, 255, 128)\n)  # Bright pink, semi-transparent\n\n",
          "display_code": "overlay = Image.new(\n    \"RGBA\", mask_image.size, (255, 0, 255, 128)\n)  # Bright pink, semi-transparent\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 74,
          "line_range": [
            74,
            77
          ]
        },
        {
          "code": "# Use the mask to determine where to apply the color.\n# We need the mask as an alpha channel\n",
          "display_code": "",
          "annotation": "Use the mask to determine where to apply the color.\nWe need the mask as an alpha channel",
          "is_comment": true,
          "start_line": 78,
          "line_range": [
            78,
            79
          ],
          "target_line_range": [
            80,
            81
          ]
        },
        {
          "code": "overlay.putalpha(mask_image)\n\n",
          "display_code": "overlay.putalpha(mask_image)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 80,
          "line_range": [
            80,
            81
          ]
        },
        {
          "code": "# Resize the overlay to match the original image if needed\n",
          "display_code": "",
          "annotation": "Resize the overlay to match the original image if needed",
          "is_comment": true,
          "start_line": 82,
          "line_range": [
            82,
            82
          ],
          "target_line_range": [
            83,
            85
          ]
        },
        {
          "code": "if overlay.size != cat_image.size:\n    overlay = overlay.resize(cat_image.size)\n\n",
          "display_code": "if overlay.size != cat_image.size:\n    overlay = overlay.resize(cat_image.size)\n\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 83,
          "line_range": [
            83,
            85
          ]
        },
        {
          "code": "# Overlay the colored mask on the original image. Save both images.\n",
          "display_code": "",
          "annotation": "Overlay the colored mask on the original image. Save both images.",
          "is_comment": true,
          "start_line": 86,
          "line_range": [
            86,
            86
          ],
          "target_line_range": [
            87,
            93
          ]
        },
        {
          "code": "result = Image.alpha_composite(cat_image, overlay)\n\nmask_filename = f\"cat_mask.png\"\nmask_image.save(mask_filename)\n\nmerged_filename = f\"cat_with_mask.png\"\nresult.save(merged_filename)\n",
          "display_code": "result = Image.alpha_composite(cat_image, overlay)\n\nmask_filename = f\"cat_mask.png\"\nmask_image.save(mask_filename)\n\nmerged_filename = f\"cat_with_mask.png\"\nresult.save(merged_filename)\n",
          "annotation": "",
          "is_comment": false,
          "start_line": 87,
          "line_range": [
            87,
            93
          ]
        }
      ],
      "shell_segments": [
        {
          "explanation": "First, install the Google Generative AI library",
          "command": "pip install google-generative-ai",
          "output": ""
        },
        {
          "explanation": "Then run the program with Python",
          "command": "python cat_segmentation.py",
          "output": "# Expected output (example):\n# [{\"box_2d\": [100, 50, 900, 750], \"mask\": \"base64_encoded_png_data\", \"label\": \"Main Coon Cat\"}, ...]"
        }
      ],
      "image_data": [
        {
          "path": "examples/008-image-segmentation/image-segmentation.png",
          "filename": "image-segmentation.png",
          "caption": "Segmentation"
        }
      ],
      "documentation_links": [
        "https://ai.google.dev/gemini-api/docs/vision?lang=python#image_segmentation"
      ],
      "section_id": "002-basic-images",
      "section_title": "Images Basics"
    }
  ],
  "sections": [
    {
      "id": "001-basic-text",
      "title": "Text Basics",
      "description": "",
      "order": 1,
      "examples": [
        "001-basic-generation",
        "002-streaming-text",
        "003-system-prompt"
      ]
    },
    {
      "id": "002-basic-images",
      "title": "Images Basics",
      "description": "",
      "order": 2,
      "examples": [
        "004-image-q-a",
        "005-image-generation",
        "006-editing-images",
        "007-bounding-boxes",
        "008-image-segmentation"
      ]
    }
  ]
}